from flask import abort
from flask import current_app as app
from flask import flash, redirect, render_template, request, url_for
from flask_user import current_user
from opencve.commands import info
from opencve.constants import PRODUCT_SEPARATOR
from opencve.controllers.main import main, welcome
from opencve.controllers.reports import ReportController
from opencve.extensions import db
from opencve.models.changes import Change
from opencve.models.categories import Category
from opencve.models.users import User
from opencve.models.cve import Cve
from opencve.models.events import Event
from sqlalchemy import and_
from sqlalchemy.dialects.postgresql import array
from sqlalchemy.orm import aliased, joinedload
from flask_login import current_user, login_required

from celery.utils.log import get_task_logger


logger = get_task_logger(__name__)


@welcome.route("/welcome")
def index():
    if not app.config.get("DISPLAY_WELCOME", False):
        abort(404)
    return render_template("index.html")


@welcome.route("/terms")
def terms():
    if not app.config.get("DISPLAY_TERMS", False):
        abort(404)
    return render_template("terms.html")


@main.route("/")
def home():
    # Allow customization of the homepage
    if not current_user.is_authenticated:
        if app.config.get("DISPLAY_WELCOME", False):
            return redirect(url_for("welcome.index"))
        return redirect(url_for("main.cves"))

    # Fetch the user subscriptions
    vendors = [v.name for v in current_user.vendors]

    vendors.extend(
        [f"{p.vendor.name}{PRODUCT_SEPARATOR}{p.name}" for p in current_user.products])

    # For every category the user follows, we also add the products and vendors
    for c in current_user.categories:
        vendors.extend([f"{v.name}" for v in c.vendors])
        vendors.extend(
            [f"{p.vendor.name}{PRODUCT_SEPARATOR}{p.name}" for p in c.products])

    # Handle the page parameter
    page = request.args.get("page", type=int, default=1)
    page = 1 if page < 1 else page

    # Default values
    per_page = app.config["ACTIVITIES_PER_PAGE"]
    changes = []

    # Only display the 5 last reports
    reports = ReportController.list_items({"user_id": current_user.id})[:5]

    # If user has subscriptions we can display the last activities of the vendors
    if vendors:
        changes = (
            Change.query.options(joinedload("cve"))
            .options(joinedload("events"))
            .filter(Change.cve_id == Cve.id)
            .filter(Cve.vendors.has_any(array(vendors)))
            .filter(Change.events.any())
            .order_by(Change.created_at.desc())
            .limit(per_page)
            .offset((page - 1) * per_page)
            .all()
        )

    return render_template("home.html", changes=changes, reports=reports, page=page)

@main.route("/generateUserReport")
@login_required
def generateUserReport():
    flash("Generating report...")
    return render_template(
            "home.html"
    )
    

