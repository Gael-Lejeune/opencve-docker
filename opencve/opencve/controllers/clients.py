from pathlib import Path

import openpyxl
from flask import abort
from flask import current_app as app
from opencve.commands import create_client, ensure_config, error, info
from opencve.controllers.base import BaseController
from opencve.extensions import db
from opencve.models.clients import Client
from opencve.models.products import Product
from opencve.models.vendors import Vendor
from opencve.utils import get_clients_letters
from sqlalchemy.exc import IntegrityError


class ClientController(BaseController):
    model = Client
    order = Client.name.asc()
    per_page_param = "CLIENTS_PER_PAGE"
    schema = {
        "letter": {"type": str},
        "search": {"type": str},
        "client_name": {"type": str},
    }

    @classmethod
    def build_query(cls, args):
        letter = args.get("letter")

        query = cls.model.query

        # Search by term
        if args.get("search"):
            search = args.get("search").lower().replace(
                "%", "").replace("_", "")
            query = query.filter(cls.model.name.like("%{}%".format(search)))

        # Search by letter
        if letter:
            if letter not in get_clients_letters():
                abort(404)

            query = query.filter(cls.model.name.like("{}%".format(letter)))

        return query, {}


def create_client(name):
    """Create a Client."""
    name = str(name).lower()
    if Client.query.filter_by(name=name).first():
        return -1

    client = Client(
        name=name,
    )
    db.session.add(client)
    try:
        db.session.commit()
    except IntegrityError as e:
        error(e)
        return -1


def edit_client_name(client, name):
    """Edit the specified Client name."""
    name = str(name).lower()
    if Client.query.filter_by(name=name).first():
        return -1
    client.name = name
    try:
        db.session.commit()
    except IntegrityError as e:
        error(e)
        return -1


def delete_client(client):  # Does not work when someone is subscribed to the client //TODO
    """Delete the specified Client."""
    try:
        db.session.delete(client)
        db.session.commit()
    except IntegrityError as e:
        error(e)
        return -1


def add_product(client, vendor, product):
    """Add Product to the specified client"""
    client_query = Client.query.filter_by(name=client.name).first().id

    if not client_query:
        return info(f"{client} does not exists in Clients")
    vendor_query = Vendor.query.filter_by(name=vendor).first().id

    if not vendor_query:
        return info(f"{vendor} does not exists in Vendors")
    product_query = Product.query.filter_by(
        name=product, vendor_id=vendor_query).first().id

    if not product_query:
        return info(f"{product} does not exists in Products")
    # FOR TESTING ONLY, NEED TO CHECK THE INPUT OR CHANGE THE USED METHOD //TODO
    existance = db.session.execute("SELECT 1 FROM clients_products WHERE client_id=('"+str(
        client_query)+"') and product_id=('"+str(product_query)+"')").first()

    if existance:
        return info(f"{product} already exists in client {client}")
    db.session.execute("INSERT INTO clients_products(client_id,product_id) VALUES (('" +
                       str(client_query)+"'),('"+str(product_query)+"'))")

    try:
        db.session.commit()
    except IntegrityError as e:
        error(e)
    else:
        return info("Product "+str(product)+" added to client "+str(client))


def read_excel(client, xlsx_file):
    wb_obj = openpyxl.load_workbook(xlsx_file)
    sheet = wb_obj.active
    data = []
    found_vendor = False
    found_product = False
    found_version = False
    vendor_col = None
    product_col = None
    version_col = None
    min_value_index = None
    max_value_index = sheet.max_row

    for row in range(1, 3):  # To be sure, we check the 3 firsts rows
        for col in range(1, sheet.max_column):
            if str(sheet[row][col].value).lower() == "vendor":
                # info("found vendor column")
                vendor_col = col
                min_value_index = row+1
                found_vendor = True

            elif str(sheet[row][col].value).lower() == "product":
                # info("found product column")
                product_col = col
                found_product = True

            elif str(sheet[row][col].value).lower() == "version":
                # info("found version column")
                version_col = col
                found_version = True

    if not found_vendor or not found_product or not found_version:
        # info("Column format is not good")
        return -1

    # For every row, we check if the value is already in the data list
    for i in range(min_value_index, max_value_index):
        if sheet[i][vendor_col].value != None and sheet[i][product_col].value != None and sheet[i][version_col].value != None:
            d = str(sheet[i][vendor_col].value).lower(
            )+":"+str(sheet[i][product_col].value).lower()+":"+str(sheet[i][version_col].value).lower()
            if d not in data:
                data.append(d)
    info(data)
    for i in data:
        info(i.split(":")[0])
        info(i.split(":")[1])
        info(i.split(":")[2])
        add_product(client, i.split(":")[0], i.split(":")[1], i.split(":")[2])
