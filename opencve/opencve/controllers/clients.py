from difflib import get_close_matches
import sys
from opencve.models.vendors import Vendor
from opencve.models.products import Product
from opencve.extensions import db
from opencve.commands import error, info
from sqlalchemy.exc import IntegrityError
from flask import current_app as app
from pathlib import Path
import openpyxl
from flask import abort

from opencve.controllers.base import BaseController
from opencve.models.clients import Client
from opencve.utils import get_clients_letters


class ClientController(BaseController):
    model = Client
    order = Client.name.asc()
    per_page_param = "CLIENTS_PER_PAGE"
    schema = {
        "letter": {"type": str},
        "search": {"type": str},
    }

    @classmethod
    def build_query(cls, args):
        letter = args.get("letter")

        query = cls.model.query

        # Search by term
        if args.get("search"):
            search = args.get("search").lower().replace(
                "%", "").replace("_", "")
            query = query.filter(cls.model.name.like("%{}%".format(search)))

        # Search by letter
        if letter:
            if letter not in get_clients_letters():
                abort(404)

            query = query.filter(cls.model.name.like("{}%".format(letter)))

        return query, {}


VENDORS = []
PRODUCTS = []


def dehumanize_filter(name):
    return "_".join(map(lambda x: x.lower(), name.split(" ")))


def find_db_name(Model, name):
    try:
        name = dehumanize_filter(name)
        info("Name : " + name)

        human_names = VENDORS if Model is Vendor else PRODUCTS

        db_name = get_close_matches(name, human_names, n=1, cutoff=0.6)
        if len(db_name) > 0:
            db_name = db_name[0]
        else:
            raise LookupError

        info("db_name : " + db_name)
        return db_name
    except LookupError:
        error(name + " not found in db names")
        return ""
    except Exception as e:
        error(e)
        return ""

def find_product_id(vendor, product, version):
    vendor_query = Vendor.query.filter_by(
        name=find_db_name(Vendor, vendor)).first()
    if vendor_query is None:
        return info(f"{vendor} does not exists in Vendors")
    vendor_query = vendor_query.id

    product_query = Product.query.filter_by(name=find_db_name(
        Product, version), vendor_id=vendor_query).first()
    if product_query is None:
        return info(f"{product} does not exists in Products")


    return product_query.id

def add_product(client, vendor, product, version, tag):
    """Add Product to client"""
    info("Adding...")
    client_query = Client.query.filter_by(name=client.name).first().id
    if not client_query:
        return info(f"{client} does not exists in Clients")
    
    if tag is None:
        product_id = find_product_id(vendor, product, version)
        if product_id is None:
            return
    else:
        info("Tag " + tag)
        product_query = Product.query.filter_by(name=str(tag)).first()
        if product_query is None:
            return info(f"{tag} does not exists in Products")
        product_id = product_query.id


    # FOR TESTING ONLY, NEED TO CHECK THE INPUT OR CHANGE THE USED METHOD //TODO
    existance = db.session.execute("SELECT 1 FROM clients_products WHERE client_id=('"+str(
        client_query)+"') and product_id=('"+str(product_id)+"')").first()
    if existance:
        return info(f"{product} already exists in client {client}")
    db.session.execute("INSERT INTO clients_products(client_id,product_id) VALUES (('" +
                       str(client_query)+"'),('"+str(product_id)+"'))")
    
    try:
        db.session.commit()
    except IntegrityError as e:
        error(e)
    else:
        return info("Product "+str(product)+" added to client "+str(client))


def read_excel(client, xlsx_file):
    global PRODUCTS
    global VENDORS
    VENDORS = [x.name for x in Vendor.query.all()]
    PRODUCTS = [x.name for x in Product.query.all()]
    wb_obj = openpyxl.load_workbook(xlsx_file)
    sheet = wb_obj.active
    data = []
    vendor_col = None
    product_col = None
    version_col = None
    tag_col = None
    min_value_index = None
    max_value_index = sheet.max_row

    for row in range(1, 3):
        for col in range(1, sheet.max_column):
            if str(sheet[row][col].value).lower() == "vendor":
                # info("found vendor column")
                vendor_col = col
                min_value_index = row+1
            elif str(sheet[row][col].value).lower() == "product":
                # info("found product column")
                product_col = col
            elif str(sheet[row][col].value).lower() == "version":
                # info("found version column")
                version_col = col
            elif str(sheet[row][col].value).lower() == "tag":
                # info("found version column")
                tag_col = col

    if vendor_col is None or product_col is None or version_col is None or tag_col is None:
        # info("Column format is not good")
        return -1

    for i in range(min_value_index, max_value_index):
        if sheet[i][vendor_col].value != None and sheet[i][product_col].value != None and sheet[i][version_col].value != None:
            d = str(sheet[i][vendor_col].value).lower(
            )+":"+str(sheet[i][product_col].value).lower()+":"+str(sheet[i][version_col].value).lower()
            tag = sheet[i][tag_col].value
            if (d, tag) not in data:
                data.append((d, tag))
    ite = 0
    for (i, tag) in data:
        ite += 1
        print("ite :", ite)
        info("vendor :" + i.split(":")[0])
        info("product :" + i.split(":")[1])
        info("version :" + i.split(":")[2])
        add_product(client, i.split(":")[0], i.split(":")[1], i.split(":")[2], tag)
    VENDORS = []
    PRODUCTS = []
