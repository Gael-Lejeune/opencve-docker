import os
import uuid

from flask import Flask
from flask import current_app as app
from flask import flash, redirect, render_template, request, url_for
from flask_login import current_user, login_required
from flask_wtf import FlaskForm
from opencve.commands import info
from opencve.controllers.clients import (ClientController, create_client,
                                         delete_client, edit_client_name,
                                         read_excel)
from opencve.controllers.main import main
from opencve.models.clients import Client
from opencve.utils import get_clients_letters
from werkzeug.utils import secure_filename

UPLOAD_FOLDER = '/app/venv/lib/python3.7/site-packages/opencve/data'
ALLOWED_EXTENSIONS = {'xlsx'}


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# All the following routes are called in the jinja templates via url_for('main.myroute')


@main.route("/clients", methods=['GET', 'POST'])
@login_required
def clients():  # Clients list
    clients, _, pagination = ClientController.list(request.args)
    # if a client name is specified by a POST form, we create the given client
    if request.method == 'POST' and request.form.get('client_name'):
        client_name = request.form.get('client_name')
        if create_client(str(client_name).lower()) == -1:
            flash(f"Client {client_name} already exists.")
        else:
            return redirect(url_for('main.clients'))

    return render_template(
        "clients.html",
        clients=clients,
        letters=get_clients_letters(),
        pagination=pagination,
        form=FlaskForm()
    )


@main.route("/client/<client_name>")
@login_required
def client(client_name):  # Specified Client page
    client = Client.query.filter_by(name=client_name).first()

    return render_template(
        "client.html",
        client=client,
        form=FlaskForm()
    )


@main.route("/client/<client_name>/edit", methods=['GET', 'POST'])
@login_required
def edit_name(client_name):  # Specified Client page when the name modifying form is called
    client = Client.query.filter_by(name=client_name).first()
    if request.method == 'POST' and request.form.get('new_client_name'):
        new_client_name = request.form.get('new_client_name')
        if edit_client_name(client, str(new_client_name).lower()) == -1:
            flash(f"Client {new_client_name} already exists.")
        else:
            return redirect(url_for('main.client', client_name=new_client_name))
    else:
        return render_template(
            "client.html",
            client=client,
            form=FlaskForm()
        )


@main.route("/client/<client_name>/delete")
@login_required
def delete(client_name):  # Specified Client page when the delete button is clicked
    client = Client.query.filter_by(name=client_name).first()
    if delete_client(client) == -1:
        flash(f"Error")
    else:
        return redirect(url_for('main.clients'))


@main.route("/client/<client_name>/upload", methods=['GET', 'POST'])
@login_required
# Specified Client page when the product list uploading form is used
def upload_file(client_name):
    client = Client.query.filter_by(name=client_name).first()
    if request.method == 'POST' and 'file' in request.files:
        file = request.files['file']
        # If the user does not select a file, the browser submits an empty file without a filename.
        if file.filename == '':
            flash('No selected file')
            return render_template(
                "client.html",
                client=client,
                form=FlaskForm()
            )
        if not allowed_file(file.filename):
            flash('File Format Not Allowed')
            return render_template(
                "client.html",
                client=client,
                form=FlaskForm()
            )
        if file:
            extensions = secure_filename(file.filename).split(".")[1]
            filename = str(uuid.uuid4())+"."+str(extensions)
            app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
            path_to_file = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            # file.save(secure_filename(path_to_file))
            if read_excel(client, file) == -1:
                flash('Excel file not containing "vendor", "product", "version" and "tag" rows')
            else:
                flash(f'File Uploaded and products added to client {client}')
            return redirect(request.url)
    else:
        return render_template(
            "client.html",
            client=client,
            form=FlaskForm()
        )
